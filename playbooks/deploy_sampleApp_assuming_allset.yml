---
- name: SampleApp Deploy Playbook
  hosts: webservers
  vars_files:
    - ../vars/deploy_sample_app_vars.yml
  become: yes
  tasks:
    - name: yum update
      ansible.builtin.shell: yum update -y

    - name: Test npm existance
      ansible.builtin.shell: npm --version
      ignore_errors: yes
      register: npm_installation_details

    - name: Adding node to dnf repo
      ansible.builtin.shell: dnf module enable nodejs:20 -y
      when: npm_installation_details.failed

    - name: Install node
      ansible.builtin.shell: dnf install nodejs -y
      when: npm_installation_details.failed

    - name: Check App source location existance
      ansible.builtin.stat:
        path: "{{ sample_app_src_dir }}"
      register: app_source_location_details

    - name: Create a location to save sample app
      ansible.builtin.file:
        path: "{{ sample_app_src_dir }}"
        state: directory
        mode: '0755' # Optional: Set permissions
      when: not app_source_location_details.stat.isdir

    - name: Check sample app git repo existance
      ansible.builtin.stat:
        path: "{{ sample_app_src_dir }}/{{ sample_app_name }}"
      register: sample_app_repo_details

    # - name: Print a debug message
    #   ansible.builtin.debug:
    #     msg: "Path exists and is a directory"
    #   when: p.stat.isdir is defined and p.stat.isdir

    - name: Install git
      yum:
        name: git
        state: latest

    - name: Git clone the source of sample app
      git:
        repo: "{{ sample_app_git_repo }}"
        dest: "{{ sample_app_src_dir }}/{{ sample_app_name }}"
        clone: yes
        update: yes
      when: not sample_app_repo_details.stat.isdir

    - name: Check the mysql_docker container is running or not
      ansible.builtin.shell:
        cmd:  docker ps
      register: mysql_docker_status

    # - name: Check the user after become no
    #   become: no  # it's a bash alias for the cloud-user profile. it wont be there for "root"
    #   ansible.builtin.shell:
    #     cmd:  whoami   # yeah this become: no works

    - name: Starting mysql_docker container (if not already running)
      become: no  # it's a bash alias for the cloud-user profile. it wont be there for "root"
      ansible.builtin.shell:
        cmd:  |
          source ~/.bashrc
          start_mysql
      when: "not 'mysql_docker' in mysql_docker_status.stdout"

    - pause:
        seconds: 15

    - name: Check the existance of sample app database
      ansible.builtin.shell:
        cmd: docker exec -it mysql_docker mysql -u user -ppassword -e "show databases"
      register: mysql_db_list

    - name: Create the db required for sample app only when it's not there
      ansible.builtin.shell:
        cmd:  docker exec -it mysql_docker mysql -u user -ppassword -e "CREATE DATABASE employee_app_db;"
      register: create_db_init_attempt_status
      when: not 'employee_app_db' in mysql_db_list.stdout
      ignore_errors: yes

    - name: Granting db create previleges (if not)
      ansible.builtin.shell:
        cmd: docker exec -it mysql_docker mysql -u root -proot -e "GRANT ALL PRIVILEGES ON *.* TO 'user'@'%';"
      when: create_db_init_attempt_status.failed | default(False)

    - name: Create the db required for sample app retry
      ansible.builtin.shell:
        cmd:  docker exec -it mysql_docker mysql -u user -ppassword -e "CREATE DATABASE employee_app_db;"
      when: create_db_init_attempt_status.failed | default(False)
    # # - name: Setup nginx, for now ignore it, if it seems mandatory (you'll identify when testing) set it up.

    - name: Creating local env file needed for the dev mode run
      copy:
        src: "{{ assets_path }}/.env.local"
        dest: "{{ sample_app_src_dir }}/{{ sample_app_name }}/.env.local"

    - name: Installing node dependancies for the sample application
      ansible.builtin.shell:
        cmd:  npm install
        chdir:  "{{ sample_app_src_dir ~ '/' ~ sample_app_name }}"

    - name: Installing global node dependancies
      ansible.builtin.shell:
        cmd: npm install -g dotenv-cli pm2

    - name: Checking npm global install directory
      ansible.builtin.shell:
        cmd: npm list -g

    - name: Running migration for sample application
      ansible.builtin.shell:
        cmd:  export PATH="$PATH:/usr/local/bin" && npm run migrate:dev
        chdir:  "{{ sample_app_src_dir ~ '/' ~ sample_app_name }}"

    - name: Running db client build for the sample application
      ansible.builtin.shell:
        cmd:  export PATH="$PATH:/usr/local/bin" && npm run prisma:generate
        chdir:  "{{ sample_app_src_dir ~ '/' ~ sample_app_name }}"

    # - name: Running the sample application
    #   ansible.builtin.shell:
    #     cmd:  npm run dev
    #     chdir:  "{{ sample_app_src_dir ~ '/' ~ sample_app_name }}"
  